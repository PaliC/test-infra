name: Run mobile tests on devices

on:
  workflow_call:
    inputs:
      job-name:
        description: Name for the job, which is displayed in the GitHub UI
        default: mobile-job
        type: string
      device-type:
        description: The type of device (iOS or Android) to test against
        type: string
      runner:
        description: The runner to run the test on
        type: string
      timeout:
        description: Timeout for the job (in minutes)
        required: false
        default: 60
        type: number
      python-version:
        description: Set the python version used in the job
        required: false
        type: string
        default: '3.11'

      # AWS Device Farm, this can be copied from AWS console and it's default to
      # PyTorch project
      project-arn:
        description: The AWS Device Farm project where the test runs
        default: 'arn:aws:devicefarm:us-west-2:308535385114:project:b531574a-fb82-40ae-b687-8f0b81341ae0'
        type: string
      device-pool-arn:
        description: The device pool associated with the project
        default: 'arn:aws:devicefarm:us-west-2:308535385114:devicepool:082d10e5-d7d7-48a5-ba5c-b33d66efa1f5'
        type: string

      # Pulling test-infra itself for device farm runner script
      test-infra-repository:
        description: Test infra repository to use
        default: 'pytorch/test-infra'
        type: string
      test-infra-ref:
        description: Test infra reference to use
        default: ''
        type: string

      # iOS-specific inputs, TODO (huydhn): Support S3 links here
      ios-ipa-archive:
        description: The name of the iOS app IPA archive to run the tests
        required: false
        type: string
        default: ''
      ios-xctestrun-zip:
        description: The name of the iOS xctestrun zip archive
        required: false
        type: string
        default: ''

      # Android-specific inputs, TODO (huydhn): Support S3 links here
      android-app-archive:
        description: The name of the Android app APK archive to run
        required: false
        type: string
        default: ''
      android-test-archive:
        description: The name of the Android instrumention tests APK archive to run
        required: false
        type: string
        default: ''

      # Some share test inputs, TODO (huydhn): Support S3 links for the test spec here
      test-spec:
        description: |
          Specify how the test should be run on device. This could either be a link to
          download the spec or an existing ARN if the spec has previously been uploaded
          to AWS
        required: false
        type: string
        default: ''
      # The extra data archive could be large, so it's better to keep them on S3
      extra-data:
        description: |
          Either a link to a zip archive on S3 to be uploaded to the test device or
          an existing ARN, for example, exported models
        required: false
        type: string
        default: ''

jobs:
  job:
    name: ${{ inputs.job-name }} (${{ inputs.device-type }})
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.timeout }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clean workspace
        run: |
          echo "::group::Cleanup debug output"
          rm -rfv "${GITHUB_WORKSPACE}"
          mkdir -p "${GITHUB_WORKSPACE}"
          echo "::endgroup::"

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::308535385114:role/gha_workflow_mobile_job
          aws-region: us-east-1

      - name: Checkout repository (${{ inputs.test-infra-repository }}@${{ inputs.test-infra-ref }})
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.test-infra-repository }}
          ref: ${{ inputs.test-infra-ref }}
          path: test-infra

      - name: Setup miniconda
        uses: ./test-infra/.github/actions/setup-miniconda
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install pip dependencies
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        run: |
          ${CONDA_RUN} pip install -r requirements.txt

      - name: Download iOS app
        if: ${{ inputs.device-type == 'ios' && inputs.ios-ipa-archive != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ios-ipa-archive }}
          path: test-infra/tools/device-farm-runner/

      - name: Download iOS test suite
        if: ${{ inputs.device-type == 'ios' && inputs.ios-xctestrun-zip != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.ios-xctestrun-zip }}
          path: test-infra/tools/device-farm-runner/

      - name: Download Android app
        if: ${{ inputs.device-type == 'android' && inputs.android-app-archive != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.android-app-archive }}
          path: test-infra/tools/device-farm-runner/

      - name: Download Android test suite
        if: ${{ inputs.device-type == 'android' && inputs.android-test-archive != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.android-test-archive }}
          path: test-infra/tools/device-farm-runner/

      - name: Verify iOS artifacts
        if: ${{ inputs.device-type == 'ios' }}
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          IPA_ARCHIVE: ${{ inputs.ios-ipa-archive }}
          XCTESTRUN_ZIP: ${{ inputs.ios-xctestrun-zip }}
        run: |
          set -ex

          if [ -z "${IPA_ARCHIVE}" ] || [ -z "${XCTESTRUN_ZIP}" ]; then
            echo "Missing IPA archive or xctestrun zip"
            exit 1
          fi

          # NP: The suffix needs to be exact, otherwise, AWS will reject them
          mv "${IPA_ARCHIVE}" ci.ipa
          mv "${XCTESTRUN_ZIP}" ci.xctestrun.zip

          # Print the artifacts to manually verify them if needed
          ls -lah ci.ipa ci.xctestrun.zip

      - name: Verify Android artifacts
        if: ${{ inputs.device-type == 'android' }}
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          APP_ARCHIVE: ${{ inputs.android-app-archive }}
          TEST_ARCHIVE: ${{ inputs.android-test-archive }}
        run: |
          set -ex

          if [ -z "${APP_ARCHIVE}" ] || [ -z "${TEST_ARCHIVE}" ]; then
            echo "Missing the app or test archives"
            exit 1
          fi

          # NP: The suffix needs to be exact, otherwise, AWS will reject them
          mv "${APP_ARCHIVE}" ci.apk
          mv "${TEST_ARCHIVE}" ci.test.apk

          # Print the artifacts to manually verify them if needed
          ls -lah ci.apk ci.test.apk

      - name: Verify test spec
        id: verify-test-spec
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          TEST_SPEC: ${{ inputs.test-spec }}
        run: |
          set -ex

          if [[ "${TEST_SPEC}" == http* ]]; then
            TEST_SPEC_OUTPUT="ci.yml"

            curl -s "${TEST_SPEC}" -o "${TEST_SPEC_OUTPUT}"
            cat "${TEST_SPEC_OUTPUT}"
          else
            TEST_SPEC_OUTPUT="${TEST_SPEC}"
          fi

          echo "test-spec-output=${TEST_SPEC_OUTPUT}" >> "${GITHUB_OUTPUT}"

      - name: Verify extra data archive
        id: verify-extra-data
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          EXTRA_DATA: ${{ inputs.extra-data }}
        run: |
          set -ex

          if [ -n "${EXTRA_DATA}" ]; then
            if [[ "${EXTRA_DATA}" == http* ]]; then
              EXTRA_DATA_OUTPUT="extra-data.zip"

              curl -s "${EXTRA_DATA}" -o "${EXTRA_DATA_OUTPUT}"
              ls -lah "${EXTRA_DATA_OUTPUT}"
            else
              EXTRA_DATA_OUTPUT="${EXTRA_DATA}"
            fi
          else
            EXTRA_DATA_OUTPUT=""
          fi

          echo "extra-data-output=${EXTRA_DATA_OUTPUT}" >> "${GITHUB_OUTPUT}"

      - name: Run iOS tests on devices
        if: ${{ inputs.device-type == 'ios' }}
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          PROJECT_ARN: ${{ inputs.project-arn }}
          DEVICE_POOL_ARN: ${{ inputs.device-pool-arn }}
          TEST_SPEC: ${{ steps.verify-test-spec.outputs.test-spec-output }}
          EXTRA_DATA: ${{ steps.verify-extra-data.outputs.extra-data-output }}
          # For record keeping
          JOB_NAME: ${{ inputs.job-name }}
          DEVICE_TYPE: ${{ inputs.device-type }}
          RUN_ID: ${{ github.run_id }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
        run: |
          set -ex

          ${CONDA_RUN} python run_on_aws_devicefarm.py \
            --project-arn "${PROJECT_ARN}" \
            --device-pool-arn "${DEVICE_POOL_ARN}" \
            --app-file ci.ipa \
            --ios-xctestrun-file ci.xctestrun.zip \
            --extra-data "${EXTRA_DATA}" \
            --test-spec "${TEST_SPEC}" \
            --name-prefix "${JOB_NAME}-${DEVICE_TYPE}" \
            --workflow-id "${RUN_ID}" \
            --workflow-attempt "${RUN_ATTEMPT}"

      - name: Run Android tests on devices
        if: ${{ inputs.device-type == 'android' }}
        shell: bash
        working-directory: test-infra/tools/device-farm-runner
        env:
          PROJECT_ARN: ${{ inputs.project-arn }}
          DEVICE_POOL_ARN: ${{ inputs.device-pool-arn }}
          TEST_SPEC: ${{ steps.verify-test-spec.outputs.test-spec-output }}
          EXTRA_DATA: ${{ steps.verify-extra-data.outputs.extra-data-output }}
          # For record keeping
          JOB_NAME: ${{ inputs.job-name }}
          DEVICE_TYPE: ${{ inputs.device-type }}
          RUN_ID: ${{ github.run_id }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
        run: |
          set -ex

          ${CONDA_RUN} python run_on_aws_devicefarm.py \
            --project-arn "${PROJECT_ARN}" \
            --device-pool-arn "${DEVICE_POOL_ARN}" \
            --app-file ci.apk \
            --android-instrumention-test-file ci.test.apk \
            --extra-data "${EXTRA_DATA}" \
            --test-spec "${TEST_SPEC}" \
            --name-prefix "${JOB_NAME}-${DEVICE_TYPE}" \
            --workflow-id "${RUN_ID}" \
            --workflow-attempt "${RUN_ATTEMPT}"
